'''
+ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –æ–∑–≤—É—á–∫–∏ —Ç–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é
+ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–≥–∏
+ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –¥–æ –≥—á
- –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∂–∞–Ω–∏—Ö –∑–≤—É–∫—ñ–≤
- –∑—É–ø–∏–Ω–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
- —Ç–∏—Ö–∏–π –º–æ–¥
'''

from tts import get_speech
from EMOJI_LIB import show_all_em
import discord
from discord.ext import commands
import asyncio
import os

FFMPEG_PATH = "ffmpeg-2023-10-04-git-9078dc0c52-full_build/ffmpeg-2023-10-04-git-9078dc0c52-full_build/bin/ffmpeg.exe"
text_queue = []
always_lib = []
active = False

# with open("token.txt", "r") as file:
#     TOKEN = file.read().strip()
#     print("Token: –æ—Ç—Ä–∏–º–∞–Ω–æ")

with open("always_voiced.txt", "r") as file:
    always_lib = file.read().split(",")
    print("always_voiced: –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–µ—Ä–µ–ª—ñ–∫ –ª—é–¥–µ–π")

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True  # –î–æ–¥–∞—Ç–∏ —Ü–µ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥–æ–ª–æ—Å–æ–≤–∏—Ö —Å—Ç–∞–Ω—ñ–≤

bot = commands.Bot(command_prefix='.', intents=intents)


async def main_sound(ctx, text):
    speech = get_speech(text)
    audio_source = discord.FFmpegPCMAudio(speech, pipe=True, executable=FFMPEG_PATH)
    ctx.voice_client.play(audio_source, after=lambda e: print(f'Audio finished: {e}') if e else None)

async def process_queue(ctx):
    """–û–±—Ä–æ–±–ª—è—î —á–µ—Ä–≥—É –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è."""
    global active
    active = True
    while True:
        if text_queue:
            if ctx.guild.voice_client:
                await main_sound(ctx, text_queue[0])
                while ctx.voice_client.is_playing():
                    await asyncio.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
                text_queue.pop(0)
            else:
                await ctx.send('–ë–æ—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É.')
        else:
            await asyncio.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É, —è–∫—â–æ —á–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è

@bot.event
async def on_ready():
    print(f'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ {bot.user.name}.')

@bot.event
async def on_voice_state_update(member, before, after):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É."""
    if before.channel is None and after.channel is not None:
        channel = after.channel
        if bot.user in channel.members:
            text_queue.insert(0, f'–©–æ–π–Ω–æ {member.display_name} –ø—Ä–∏–¥–Ω–∞–≤—Å—è –¥–æ –≤–∞—Å!')

@bot.command()
async def —Ç(ctx, *, text: str):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–æ—Ç–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–æ —á–µ—Ä–≥–∏."""
    if ctx.author.voice or ctx.guild.voice_client:
        channel = ctx.author.voice.channel
        if not ctx.guild.voice_client:
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –±–æ—Ç–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
            await channel.connect()
            # await ctx.send(f'–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É {channel.name}.')
        
        text_queue.append(f"{ctx.author.display_name} –∫–∞–∂–µ: {text}")
        if not active:
            await process_queue(ctx)  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏
    else:
        await ctx.send('–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ, —â–æ–± —è –º—ñ–≥ –ø—ñ–¥\'—î–¥–Ω–∞—Ç–∏—Å—å.')

@bot.command()
async def –∑–∞–≤–∂–¥–∏(ctx):
    global always_lib
    if str(ctx.author) not in always_lib:
        always_lib.append(str(ctx.author))
        with open("always_voiced.txt", "w") as file:
            file.write(",".join(always_lib))
        await ctx.send(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {ctx.author} –±—É–¥—É—Ç—å –æ–∑–≤—É—á—É–≤–∞—Ç–∏—Å—å –∑–∞–≤–∂–¥–∏.")

@bot.command()
async def –Ω—ñ–∫–æ–ª–∏(ctx):
    global always_lib
    if str(ctx.author) in always_lib:
        always_lib.remove(str(ctx.author))
        with open("always_voiced.txt", "w") as file:
            file.write(",".join(always_lib))
        await ctx.send(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {ctx.author} –Ω–µ –±—É–¥—É—Ç—å –æ–∑–≤—É—á—É–≤–∞—Ç–∏—Å—å.")

@bot.command()
async def –µ–º–æ–¥–∂—ñ(ctx):
    await ctx.send(show_all_em())

@bot.command()
async def –≤–∏—Ö–æ–¥—å(ctx):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–æ—Ç–∞ –≤—ñ–¥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É."""
    if ctx.voice_client:
        if ctx.voice_client.is_playing():
            ctx.voice_client.stop()
        await ctx.send('–Ω—É —ñ –¥–æ–±—Ä–µ, –ø—ñ–¥—É üí¢')
        speech = get_speech('–Ω—É —ñ –¥–æ–±—Ä–µ, –ø—ñ–¥—É üí¢')
        audio_source = discord.FFmpegPCMAudio(speech, pipe=True, executable=FFMPEG_PATH)
        ctx.voice_client.play(audio_source)
        while ctx.voice_client.is_playing():
            await asyncio.sleep(1)
        await ctx.voice_client.disconnect()
        global text_queue
        text_queue = []
    else:
        await ctx.send('–Ø –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ.')

@bot.event
async def on_message(message):
    if message.author != bot.user:
        if message.author.voice and str(message.author) in always_lib:
            channel = message.author.voice.channel
            if not message.guild.voice_client:
                await channel.connect()
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–æ—Ç–∞ –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–æ —á–µ—Ä–≥–∏.
            mess = str(message.content)
            if not mess.startswith("."):
                text_queue.append(f"{message.author.display_name} –∫–∞–∂–µ: {mess}")
            global active
            if not active:
                await process_queue(await bot.get_context(message))  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if mess in text_queue:
                return
    
    # –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É
    await bot.process_commands(message)

bot.run(os.environ.get('TOKEN'))
